@using Humanizer
@using MicroBlog.Core.Constants
@using MicroBlog.Core.Models
@using MicroBlog.Core.Repositories
@using MicroBlog.Identity.Extensions
@model Post
@inject IReactionRepository ReactionRepository
@inject IBlockRepository BlockRepository
@{
    var userId = User.GetUserId();
    var sameUser = Model.UserId == userId;
    var userReactions = ReactionRepository.GetAll(x => x.PostId == Model.Id && x.UserId == userId).Select(x => x.Type).ToHashSet();
    var blocked = !sameUser && await BlockRepository.Any(x => x.UserId == Model.UserId && x.BlockedUserId == userId);

    async Task ReactionIcon(ReactionType type)
    {
        switch (type)
        {
            case ReactionType.Like: <i class="fa-solid fa-thumbs-up"></i> break;
            case ReactionType.Love: <i class="fa-solid fa-heart"></i> break;
            case ReactionType.Haha: <i class="fa-solid fa-face-laugh-squint"></i> break;
            case ReactionType.Wow: <i class="fa-solid fa-surprise"></i> break;
            case ReactionType.Sad: <i class="fa-solid fa-sad-tear"></i> break;
            case ReactionType.Angry: <i class="fa-solid  fa-angry"></i> break;
            default: break;
        }
    }

    async Task RenderReaction(ReactionType type)
    {
        @if (Model.ReactionCounts.ContainsKey(type))
        {
            var userReacted = userReactions.Contains(type);

            <div>
                <form action="/api/Post/CreateReaction" class="@(userReacted ? "d-none" : "") add-reaction-form" data-postid="@Model.Id" data-type="@type">
                    <input name="postId" value="@Model.Id" hidden />
                    <input name="type" value="@type" hidden />
                    <button type="submit" class="btn btn-outline-secondary border-0" @(blocked ? "disabled" : "")>
                        @{
                            await ReactionIcon(type);
                        }
                        @Model.ReactionCounts[type]
                    </button>
                </form>
                <form action="/api/Post/DeleteReaction" class="@(!userReacted ? "d-none" : "") remove-reaction-form" data-postid="@Model.Id" data-type="@type">
                    <input name="postId" value="@Model.Id" hidden />
                    <input name="type" value="@type" hidden />
                    <button type="submit" class="btn btn-outline-secondary border-0 active" @(blocked ? "disabled" : "")>
                        @{
                            await ReactionIcon(type);
                        }
                        @Model.ReactionCounts[type]
                    </button>
                </form>
            </div>
        }
    }
}

<div id="post-card-@Model.Id" class="card">
    <div class="card-body">
        <div class="d-flex gap-2 mb-1">
            <div class="profile-picture-50-container rounded img-thumbnail">
                <a href="/User/@Model.UserName">
                    <img src="@Model.UserProfilePictureUrl" />
                </a>
            </div>
            <div class="flex-grow-1">
                <h6 class="mb-1 fs-5"><a class="text-muted text-decoration-none" href="/User/@Model.UserName">@Model.UserName</a></h6>
                <span class="text-muted">
                    @if (DateTime.UtcNow.Subtract(Model.Created).TotalDays < 7)
                    {
                        @Model.Created.Humanize()
                    }
                    else
                    {
                        @Model.Created
                    }
                </span>
            </div>
            @if (sameUser)
            {
                <div>
                    <button type="button" class="btn btn-outline-danger border-0 delete-post-button" data-postid="@Model.Id">
                        <i class="fa-solid fa-trash"></i>
                    </button>
                    <form action="/api/Post/DeletePost" class="d-none delete-post-form" data-postid="@Model.Id">
                        <input name="postId" value="@Model.Id" hidden />
                        <div class="d-flex align-items-center gap-2">
                            <label class="text-danger">Are you sure?</label>
                            <button type="submit" class="btn btn-outline-danger border-0">
                                Delete
                            </button>
                            <button type="reset" class="btn btn-outline-primary border-0 cancel-delete-post-button" data-postid="@Model.Id">
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            }
        </div>
        <h3 class="mb-2">@Model.Title</h3>
        @Html.Raw(Model.Content)
    </div>
    <div class="card-footer">
        <div class="d-grid gap-2">
            <div class="d-flex align-items-center gap-1">
                <div class="flex-grow-1">
                    <button id="@Model.Id-collapse-comments-button" class="btn btn-outline-secondary w-100" type="button" data-bs-toggle="collapse"
                            data-bs-target="#comment-collapse-@Model.Id" aria-expanded="false" aria-controls="comment-collapse-@Model.Id">
                        Show comments
                    </button>
                </div>

                @{
                    await RenderReaction(ReactionType.Like);
                    await RenderReaction(ReactionType.Love);
                    await RenderReaction(ReactionType.Haha);
                    await RenderReaction(ReactionType.Wow);
                    await RenderReaction(ReactionType.Sad);
                    await RenderReaction(ReactionType.Angry);
                }
            </div>
            <div id="comment-collapse-@Model.Id" class="collapse comment-collapse" data-postid="@Model.Id">
                <div class="d-grid gap-2">
                    @if (!blocked)
                    {
                        <form action="/api/Post/AddComment" method="post" class="comment-form" data-postid="@Model.Id">
                            <input name="postId" value="@Model.Id" hidden />
                            <div class="d-flex gap-2 align-items-end">
                                <div class="form-floating flex-grow-1">
                                    <textarea name="content" class="form-control" placeholder="Leave a comment here" id="floatingTextarea2" style="height: 70px"></textarea>
                                    <label for="floatingTextarea2">Comment</label>
                                </div>
                                <button type="submit" class="btn btn-primary">Post</button>
                            </div>
                        </form>
                    }
                    <div id="@Model.Id-comment-container" class="d-grid gap-2 comment-container" data-postid="@Model.Id" data-before="@DateTime.UtcNow"></div>
                    <button class="btn btn-outline-secondary w-100 load-more-comments-button" data-postid="@Model.Id" data-before="@DateTime.UtcNow" type="button">
                        Load more
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
