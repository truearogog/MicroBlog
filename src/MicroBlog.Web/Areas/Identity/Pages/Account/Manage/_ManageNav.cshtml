@inject SignInManager<User> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
    var currentNavPage = (ManageNavPageType?)ViewData[nameof(ManageNavPageType)];

    async Task RenderNavButton(string link, string name, ManageNavPageType type)
    {
        <li class="nav-item">
            <a href="@link" class="nav-link @(currentNavPage == type ? "active" : "")">@name</a>
        </li>
    }
}

<ul class="nav nav-pills flex-column">
    @{
        await RenderNavButton("/Identity/Account/Manage/", "Profile", ManageNavPageType.Index);
        await RenderNavButton("/Identity/Account/Manage/Email", "Email", ManageNavPageType.Email);
        await RenderNavButton("/Identity/Account/Manage/ChangePassword", "Change Password", ManageNavPageType.ChangePassword);
        await RenderNavButton("/Identity/Account/Manage/BlockedUsers", "Blocked Users", ManageNavPageType.BlockedUsers);
        if (hasExternalLogins)
        {
            await RenderNavButton("/Identity/Account/Manage/ExternalLogins", "External Logins", ManageNavPageType.ExternalLogins);
        }
        await RenderNavButton("/Identity/Account/Manage/TwoFactorAuthentication", "Two-Factor Authentication", ManageNavPageType.TwoFactorAuthentication);
        await RenderNavButton("/Identity/Account/Manage/PersonalData", "Personal Data", ManageNavPageType.PersonalData);
    }
</ul>
